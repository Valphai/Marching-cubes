#pragma kernel PositionDensity

#include "./Includes/Noise.compute"
// #include "./Includes/IndexMap.compute"

RWStructuredBuffer<float4> Positions;
float3 OffsetPoint;

int Resolution;

int NumLayers;
float NoiseWeight;
float BaseRoughness;
float Roughness;
float Persistance;

float FloorOffset; // y coord
float HardFloor; // y coord
float FloorWeight;
float HardFloorWeight;

int Map3dIndexTo1d(int x, int y, int z) 
{
	return x + (Resolution * y) + (Resolution * Resolution * z);
}

[numthreads(8,8,8)]
void PositionDensity(uint3 id : SV_DispatchThreadID)
{
    // float density = -id.y;
    
    // Layered noise
    float noise = 0;
    float frequency = BaseRoughness;
    float amplitude = 1;
    float weight = 1;

    for (int i = 0; i < NumLayers; i++)
    {
        float simplex = SimplexNoise(id.xyz * frequency + OffsetPoint);
        float v = 1-abs(simplex); // making sure domain is [-1,1] -> [0,1] ?
        v *= v;
        v *= weight;
        noise += v * amplitude;
        frequency *= Roughness;
        amplitude *= Persistance;
    }
    float density = -(id.y + FloorOffset) + noise * NoiseWeight;

    if (id.y + FloorOffset < HardFloor) {
        density += HardFloorWeight;
    }

    int indx = Map3dIndexTo1d(id.x, id.y, id.z);
    Positions[indx] = float4(id, density);
}